"use client"

import { useState } from "react"
import { useParams, useRouter } from "next/navigation"
import Link from "next/link"
import ReactMarkdown from "react-markdown"
import remarkGfm from "remark-gfm"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Textarea } from "@/components/ui/textarea"
import {
  ArrowLeft,
  ExternalLink,
  Star,
  Heart,
  Share2,
  Flag,
  Calendar,
  Users,
  Zap,
  Shield,
  MessageSquare,
  ThumbsUp,
  ThumbsDown,
} from "lucide-react"

// Mock tool data
const mockTool = {
  id: 1,
  name: "Ë±ÜÂåÖ",
  description: "Â≠óËäÇË∑≥Âä®Êé®Âá∫ÁöÑAIÊô∫ËÉΩÂä©ÊâãÔºåÊîØÊåÅÂ§öËΩÆÂØπËØù„ÄÅÊñáÊ°£ÂàÜÊûê„ÄÅ‰ª£Á†ÅÁîüÊàêÁ≠âÂ§öÁßçÂäüËÉΩ",
  longDescription: `# Ë±ÜÂåÖ - Â≠óËäÇË∑≥Âä®AIÊô∫ËÉΩÂä©Êâã

## ‰∫ßÂìÅÊ¶ÇËø∞

Ë±ÜÂåÖÊòØÂ≠óËäÇË∑≥Âä®ÂºÄÂèëÁöÑÊñ∞‰∏Ä‰ª£AIÊô∫ËÉΩÂä©ÊâãÔºåÂü∫‰∫éÂÖàËøõÁöÑÂ§ßËØ≠Ë®ÄÊ®°ÂûãÊäÄÊúØÔºåËÉΩÂ§üËøõË°åËá™ÁÑ∂ÊµÅÁïÖÁöÑÂØπËØù‰∫§ÊµÅ„ÄÇÂÆÉ‰∏ç‰ªÖÊîØÊåÅÊó•Â∏∏ËÅäÂ§©ÔºåËøòËÉΩÂçèÂä©Áî®Êà∑ËøõË°åÊñáÊ°£ÂàÜÊûê„ÄÅ‰ª£Á†ÅÁºñÂÜô„ÄÅÂàõÊÑèÂÜô‰Ωú„ÄÅÂ≠¶‰π†ËæÖÂØºÁ≠âÂ§öÁßç‰ªªÂä°„ÄÇ

## Ê†∏ÂøÉÁâπÊÄß

### ü§ñ Êô∫ËÉΩÂØπËØù
- **Â§öËΩÆÂØπËØù**: ÊîØÊåÅËøûÁª≠ÂØπËØùÔºåÁêÜËß£‰∏ä‰∏ãÊñá
- **Ëá™ÁÑ∂ËØ≠Ë®Ä**: ÁêÜËß£‰∫∫Á±ªËá™ÁÑ∂Ë°®ËææÔºåÊó†ÈúÄÁâπÂÆöÊåá‰ª§
- **‰∏™ÊÄßÂåñ**: Ê†πÊçÆÁî®Êà∑‰π†ÊÉØË∞ÉÊï¥ÂõûÂ§çÈ£éÊ†º

### üìö ÊñáÊ°£ÂàÜÊûê
- **ÊñáÊ°£‰∏ä‰º†**: ÊîØÊåÅPDF„ÄÅWord„ÄÅTXTÁ≠âÂ§öÁßçÊ†ºÂºè
- **Êô∫ËÉΩÊÄªÁªì**: Ëá™Âä®ÊèêÂèñÂÖ≥ÈîÆ‰ø°ÊÅØÂíåË¶ÅÁÇπ
- **ÈóÆÁ≠îÂäüËÉΩ**: ÈíàÂØπÊñáÊ°£ÂÜÖÂÆπËøõË°åÊ∑±Â∫¶ÈóÆÁ≠î

### üíª ‰ª£Á†ÅÁîüÊàê
- **Â§öËØ≠Ë®ÄÊîØÊåÅ**: Python„ÄÅJavaScript„ÄÅJava„ÄÅGoÁ≠â
- **‰ª£Á†ÅËß£Èáä**: ËØ¶ÁªÜËß£Èáä‰ª£Á†ÅÈÄªËæëÂíåÂäüËÉΩ
- **Ë∞ÉËØïÂª∫ËÆÆ**: Êèê‰æõ‰ª£Á†Å‰ºòÂåñÂíåÈîôËØØ‰øÆÂ§çÂª∫ËÆÆ

### ‚úçÔ∏è ÂàõÊÑèÂÜô‰Ωú
- **ÊñáÁ´†Âàõ‰Ωú**: ÂçèÂä©Êí∞ÂÜôÂêÑÁ±ªÊñáÁ´†ÂíåÂÜÖÂÆπ
- **È£éÊ†ºË∞ÉÊï¥**: ÊîØÊåÅ‰∏çÂêåÂÜô‰ΩúÈ£éÊ†ºÂíåËØ≠Ë∞É
- **ÂàõÊÑèÊøÄÂèë**: Êèê‰æõÂÜô‰ΩúÁÅµÊÑüÂíåÊÄùË∑Ø

## ÊäÄÊúØ‰ºòÂäø

- **Â§ßÊ®°ÂûãÊäÄÊúØ**: Âü∫‰∫éÊúÄÊñ∞ÁöÑGPTÊû∂ÊûÑ
- **ÊåÅÁª≠Â≠¶‰π†**: Ê®°Âûã‰∏çÊñ≠‰ºòÂåñÂíåÊõ¥Êñ∞
- **ÂÆâÂÖ®ÂèØÈù†**: Â§öÈáçÂÆâÂÖ®Èò≤Êä§Êú∫Âà∂
- **ÈöêÁßÅ‰øùÊä§**: ‰∏•Ê†ºÁöÑÊï∞ÊçÆÈöêÁßÅ‰øùÊä§

## ‰ΩøÁî®Âú∫ÊôØ

### ‰∏™‰∫∫Áî®Êà∑
- Êó•Â∏∏ÈóÆÁ≠îÂíåËÅäÂ§©
- Â≠¶‰π†ËæÖÂØºÂíåÁü•ËØÜËé∑Âèñ
- ÂàõÊÑèÂÜô‰ΩúÂíåÂÜÖÂÆπÂàõ‰Ωú

### ‰∏ì‰∏öÁî®Êà∑
- Á®ãÂ∫èÂëò‰ª£Á†ÅËæÖÂä©
- Á†îÁ©∂‰∫∫ÂëòÊñáÊ°£ÂàÜÊûê
- ÂÜÖÂÆπÂàõ‰ΩúËÄÖÂÜô‰ΩúÊîØÊåÅ

### ‰ºÅ‰∏öÂ∫îÁî®
- ÂÆ¢ÊúçËá™Âä®Âåñ
- ÊñáÊ°£Êô∫ËÉΩÂ§ÑÁêÜ
- Áü•ËØÜÂ∫ìÊûÑÂª∫

## ÂÆö‰ª∑Á≠ñÁï•

- **ÂÖçË¥πÁâà**: Âü∫Á°ÄÂäüËÉΩÔºåÊØèÊó•ÈôêÈ¢ù
- **‰∏ì‰∏öÁâà**: ÂÆåÊï¥ÂäüËÉΩÔºåÊó†‰ΩøÁî®ÈôêÂà∂
- **‰ºÅ‰∏öÁâà**: ÂÆöÂà∂ÂåñÊúçÂä°ÔºåAPIÊé•Âè£

## Êõ¥Êñ∞Êó•Âøó

### v2.1.0 (2024-01-20)
- Êñ∞Â¢û‰ª£Á†ÅÁîüÊàêÂäüËÉΩ
- ‰ºòÂåñÊñáÊ°£ÂàÜÊûêÁÆóÊ≥ï
- ÊèêÂçáÂØπËØùÂìçÂ∫îÈÄüÂ∫¶

### v2.0.0 (2024-01-15)
- ÂÖ®Êñ∞ÁïåÈù¢ËÆæËÆ°
- Â¢ûÂº∫Â§öËΩÆÂØπËØùËÉΩÂäõ
- ÊîØÊåÅÊõ¥Â§öÊñáÊ°£Ê†ºÂºè

## Áî®Êà∑ÂèçÈ¶à

> "Ë±ÜÂåÖÊòØÊàëÁî®ËøáÊúÄÂ•ΩÁöÑAIÂä©ÊâãÔºåÁâπÂà´ÊòØ‰ª£Á†ÅÁîüÊàêÂäüËÉΩÔºåÂ§ßÂ§ßÊèêÈ´ò‰∫ÜÊàëÁöÑÂºÄÂèëÊïàÁéá„ÄÇ" - Âº†Â∑•Á®ãÂ∏à

> "ÊñáÊ°£ÂàÜÊûêÂäüËÉΩÂ§™Ê£í‰∫ÜÔºÅËÉΩÂø´ÈÄüÊèêÂèñÂÖ≥ÈîÆ‰ø°ÊÅØÔºåËäÇÁúÅ‰∫ÜÂ§ßÈáèÊó∂Èó¥„ÄÇ" - ÊùéÁ†îÁ©∂Âëò

> "ÁïåÈù¢ÂèãÂ•ΩÔºåÂäüËÉΩÂº∫Â§ßÔºåÊòØÂ≠¶‰π†ÂíåÂ∑•‰ΩúÁöÑÂ•ΩÂ∏ÆÊâã„ÄÇ" - ÁéãÂ≠¶Áîü`,
  icon: "/ai-chat-assistant-icon.png",
  category: "AIÂÜô‰ΩúÂ∑•ÂÖ∑",
  subcategory: "Êô∫ËÉΩÂØπËØù",
  rating: 4.8,
  reviewCount: 1250,
  users: "100‰∏á+",
  website: "https://www.doubao.com",
  pricing: "ÂÖçË¥π",
  features: ["Â§öËΩÆÊô∫ËÉΩÂØπËØù", "ÊñáÊ°£ÂàÜÊûê‰∏éÊÄªÁªì", "‰ª£Á†ÅÁîüÊàê‰∏éË∞ÉËØï", "ÂàõÊÑèÂÜô‰ΩúËæÖÂä©", "Â≠¶‰π†ÈóÆÁ≠î", "Â§öËØ≠Ë®ÄÊîØÊåÅ"],
  screenshots: ["/tool-screenshot-1.png", "/tool-screenshot-2.png", "/tool-screenshot-3.png"],
  tags: ["ÂØπËØùAI", "ÊñáÊ°£ÂàÜÊûê", "‰ª£Á†ÅÁîüÊàê", "ÂÜô‰ΩúÂä©Êâã", "ÂÖçË¥π"],
  publishedAt: "2024-01-15",
  updatedAt: "2024-01-20",
  developer: {
    name: "Â≠óËäÇË∑≥Âä®",
    avatar: "/bytedance-logo.png",
    verified: true,
  },
  stats: {
    views: 15420,
    favorites: 892,
    shares: 156,
  },
}

// Mock reviews data
const mockReviews = [
  {
    id: 1,
    user: {
      name: "Âº†‰∏â",
      avatar: "/user-avatar-1.png",
    },
    rating: 5,
    content: "ÈùûÂ∏∏Â•ΩÁî®ÁöÑAIÂä©ÊâãÔºåÂõûÁ≠îÈóÆÈ¢òÂæàÂáÜÁ°ÆÔºåÁïåÈù¢‰πüÂæàÂèãÂ•Ω„ÄÇÁâπÂà´ÊòØ‰ª£Á†ÅÁîüÊàêÂäüËÉΩÔºåÂ§ßÂ§ßÊèêÈ´ò‰∫ÜÊàëÁöÑÂ∑•‰ΩúÊïàÁéá„ÄÇ",
    date: "2024-01-18",
    helpful: 23,
    unhelpful: 2,
  },
  {
    id: 2,
    user: {
      name: "ÊùéÂõõ",
      avatar: "/user-avatar-2.png",
    },
    rating: 4,
    content: "Êï¥‰Ωì‰ΩìÈ™å‰∏çÈîôÔºåÂØπËØùÂæàËá™ÁÑ∂„ÄÇ‰∏çËøáÊúâÊó∂ÂÄôÂØπÂ§çÊùÇÈóÆÈ¢òÁöÑÁêÜËß£ËøòÊúâÂæÖÊèêÂçá„ÄÇ",
    date: "2024-01-16",
    helpful: 15,
    unhelpful: 1,
  },
  {
    id: 3,
    user: {
      name: "Áéã‰∫î",
      avatar: "/user-avatar-3.png",
    },
    rating: 5,
    content: "ÊñáÊ°£ÂàÜÊûêÂäüËÉΩÂ§™Ê£í‰∫ÜÔºÅËÉΩÂø´ÈÄüÊèêÂèñÂÖ≥ÈîÆ‰ø°ÊÅØÔºåËäÇÁúÅ‰∫ÜÂ§ßÈáèÊó∂Èó¥„ÄÇÂº∫ÁÉàÊé®ËçêÔºÅ",
    date: "2024-01-14",
    helpful: 31,
    unhelpful: 0,
  },
]

// Mock related tools
const relatedTools = [
  {
    id: 2,
    name: "Âç≥Ê¢¶AI",
    description: "AIËßÜÈ¢ëÁîüÊàêÂ∑•ÂÖ∑",
    icon: "/placeholder-plb3q.png",
    category: "AIËßÜÈ¢ëÂ∑•ÂÖ∑",
    rating: 4.6,
  },
  {
    id: 3,
    name: "TRAEÁºñÁ®ã",
    description: "AIÁºñÁ®ãÂä©Êâã",
    icon: "/ai-programming-assistant-icon.png",
    category: "AIÁºñÁ®ãÂ∑•ÂÖ∑",
    rating: 4.7,
  },
  {
    id: 4,
    name: "AIPPT",
    description: "AIÁîüÊàêPPTÂ∑•ÂÖ∑",
    icon: "/ai-presentation-tool-icon.png",
    category: "AIÂäûÂÖ¨Â∑•ÂÖ∑",
    rating: 4.5,
  },
]

export default function ToolDetailPage() {
  const params = useParams()
  const router = useRouter()
  const [isFavorited, setIsFavorited] = useState(false)
  const [activeTab, setActiveTab] = useState("overview")
  const [newReview, setNewReview] = useState("")
  const [userRating, setUserRating] = useState(0)

  const renderStars = (rating: number, interactive = false, onRate?: (rating: number) => void) => {
    return (
      <div className="flex items-center gap-1">
        {[1, 2, 3, 4, 5].map((star) => (
          <Star
            key={star}
            className={`w-4 h-4 ${
              star <= rating ? "fill-yellow-400 text-yellow-400" : "text-gray-300"
            } ${interactive ? "cursor-pointer hover:text-yellow-400" : ""}`}
            onClick={() => interactive && onRate && onRate(star)}
          />
        ))}
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center gap-4 mb-6">
            <Button variant="ghost" onClick={() => router.back()} className="flex items-center gap-2">
              <ArrowLeft className="w-4 h-4" />
              ËøîÂõû
            </Button>
            <div className="flex items-center gap-2 text-sm text-gray-500">
              <Link href="/" className="hover:text-blue-600">
                È¶ñÈ°µ
              </Link>
              <span>/</span>
              <Link href={`/category/${mockTool.category}`} className="hover:text-blue-600">
                {mockTool.category}
              </Link>
              <span>/</span>
              <span className="text-gray-900">{mockTool.name}</span>
            </div>
          </div>

          <div className="flex items-start gap-6">
            <div className="w-20 h-20 bg-gray-100 rounded-xl overflow-hidden flex-shrink-0">
              <img
                src={mockTool.icon || "/placeholder.svg"}
                alt={mockTool.name}
                className="w-full h-full object-cover"
              />
            </div>

            <div className="flex-1">
              <div className="flex items-start justify-between mb-4">
                <div>
                  <div className="flex items-center gap-3 mb-2">
                    <h1 className="text-3xl font-bold text-gray-900">{mockTool.name}</h1>
                    <Badge className="bg-blue-100 text-blue-800">{mockTool.category}</Badge>
                    {mockTool.pricing === "ÂÖçË¥π" && <Badge className="bg-green-100 text-green-800">ÂÖçË¥π</Badge>}
                  </div>
                  <p className="text-gray-600 text-lg mb-3">{mockTool.description}</p>

                  <div className="flex items-center gap-6 text-sm">
                    <div className="flex items-center gap-2">
                      {renderStars(mockTool.rating)}
                      <span className="font-medium">{mockTool.rating}</span>
                      <span className="text-gray-500">({mockTool.reviewCount} ËØÑ‰ª∑)</span>
                    </div>
                    <div className="flex items-center gap-1 text-gray-500">
                      <Users className="w-4 h-4" />
                      <span>{mockTool.users} Áî®Êà∑</span>
                    </div>
                    <div className="flex items-center gap-1 text-gray-500">
                      <Calendar className="w-4 h-4" />
                      <span>Êõ¥Êñ∞‰∫é {mockTool.updatedAt}</span>
                    </div>
                  </div>
                </div>

                <div className="flex items-center gap-3">
                  <Button
                    variant="outline"
                    onClick={() => setIsFavorited(!isFavorited)}
                    className={isFavorited ? "text-red-600 border-red-200" : ""}
                  >
                    <Heart className={`w-4 h-4 mr-2 ${isFavorited ? "fill-current" : ""}`} />
                    {isFavorited ? "Â∑≤Êî∂Ëóè" : "Êî∂Ëóè"}
                  </Button>
                  <Button variant="outline">
                    <Share2 className="w-4 h-4 mr-2" />
                    ÂàÜ‰∫´
                  </Button>
                  <Button asChild>
                    <a href={mockTool.website} target="_blank" rel="noopener noreferrer">
                      <ExternalLink className="w-4 h-4 mr-2" />
                      ËÆøÈóÆÂ∑•ÂÖ∑
                    </a>
                  </Button>
                </div>
              </div>

              <div className="flex flex-wrap gap-2">
                {mockTool.tags.map((tag) => (
                  <Badge key={tag} variant="secondary" className="text-xs">
                    {tag}
                  </Badge>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-6 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-2">
            <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
              <TabsList className="grid w-full grid-cols-4">
                <TabsTrigger value="overview">Ê¶ÇËßà</TabsTrigger>
                <TabsTrigger value="features">ÂäüËÉΩÁâπÊÄß</TabsTrigger>
                <TabsTrigger value="screenshots">Êà™ÂõæÂ±ïÁ§∫</TabsTrigger>
                <TabsTrigger value="reviews">Áî®Êà∑ËØÑ‰ª∑</TabsTrigger>
              </TabsList>

              <TabsContent value="overview" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Â∑•ÂÖ∑‰ªãÁªç</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="prose prose-gray max-w-none markdown-content">
                      <ReactMarkdown 
                        remarkPlugins={[remarkGfm]}
                      >
                        {mockTool.longDescription}
                      </ReactMarkdown>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>ÂºÄÂèëËÄÖ‰ø°ÊÅØ</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center gap-4">
                      <Avatar className="w-12 h-12">
                        <AvatarImage
                          src={mockTool.developer.avatar || "/placeholder.svg"}
                          alt={mockTool.developer.name}
                        />
                        <AvatarFallback>{mockTool.developer.name.charAt(0)}</AvatarFallback>
                      </Avatar>
                      <div>
                        <div className="flex items-center gap-2">
                          <h4 className="font-semibold text-gray-900">{mockTool.developer.name}</h4>
                          {mockTool.developer.verified && <Shield className="w-4 h-4 text-blue-600" />}
                        </div>
                        <p className="text-sm text-gray-600">ËÆ§ËØÅÂºÄÂèëËÄÖ</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="features" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle>‰∏ªË¶ÅÂäüËÉΩ</CardTitle>
                    <CardDescription>ËØ•Â∑•ÂÖ∑Êèê‰æõÁöÑÊ†∏ÂøÉÂäüËÉΩÂíåÁâπÊÄß</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {mockTool.features.map((feature, index) => (
                        <div key={index} className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
                          <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                            <Zap className="w-4 h-4 text-blue-600" />
                          </div>
                          <span className="font-medium text-gray-900">{feature}</span>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="screenshots" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle>‰∫ßÂìÅÊà™Âõæ</CardTitle>
                    <CardDescription>Â∑•ÂÖ∑ÁïåÈù¢ÂíåÂäüËÉΩÂ±ïÁ§∫</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {mockTool.screenshots.map((screenshot, index) => (
                        <div key={index} className="aspect-video bg-gray-100 rounded-lg overflow-hidden">
                          <img
                            src={screenshot || "/placeholder.svg?height=300&width=500"}
                            alt={`${mockTool.name} Êà™Âõæ ${index + 1}`}
                            className="w-full h-full object-cover hover:scale-105 transition-transform cursor-pointer"
                          />
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="reviews" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Áî®Êà∑ËØÑ‰ª∑</CardTitle>
                    <CardDescription>Êù•Ëá™ÁúüÂÆûÁî®Êà∑ÁöÑ‰ΩøÁî®ÂèçÈ¶à</CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    {/* Write Review */}
                    <div className="border-b pb-6">
                      <h4 className="font-semibold mb-4">ÂÜô‰∏ãÊÇ®ÁöÑËØÑ‰ª∑</h4>
                      <div className="space-y-4">
                        <div>
                          <label className="block text-sm font-medium mb-2">ËØÑÂàÜ</label>
                          {renderStars(userRating, true, setUserRating)}
                        </div>
                        <Textarea
                          placeholder="ÂàÜ‰∫´ÊÇ®ÁöÑ‰ΩøÁî®‰ΩìÈ™å..."
                          value={newReview}
                          onChange={(e) => setNewReview(e.target.value)}
                          rows={4}
                        />
                        <Button>Êèê‰∫§ËØÑ‰ª∑</Button>
                      </div>
                    </div>

                    {/* Reviews List */}
                    <div className="space-y-6">
                      {mockReviews.map((review) => (
                        <div key={review.id} className="border-b pb-6 last:border-b-0">
                          <div className="flex items-start gap-4">
                            <Avatar className="w-10 h-10">
                              <AvatarImage src={review.user.avatar || "/placeholder.svg"} alt={review.user.name} />
                              <AvatarFallback>{review.user.name.charAt(0)}</AvatarFallback>
                            </Avatar>
                            <div className="flex-1">
                              <div className="flex items-center gap-3 mb-2">
                                <h5 className="font-medium text-gray-900">{review.user.name}</h5>
                                {renderStars(review.rating)}
                                <span className="text-sm text-gray-500">{review.date}</span>
                              </div>
                              <p className="text-gray-700 mb-3">{review.content}</p>
                              <div className="flex items-center gap-4 text-sm">
                                <button className="flex items-center gap-1 text-gray-500 hover:text-green-600">
                                  <ThumbsUp className="w-4 h-4" />
                                  <span>ÊúâÁî® ({review.helpful})</span>
                                </button>
                                <button className="flex items-center gap-1 text-gray-500 hover:text-red-600">
                                  <ThumbsDown className="w-4 h-4" />
                                  <span>Êó†Áî® ({review.unhelpful})</span>
                                </button>
                                <button className="flex items-center gap-1 text-gray-500 hover:text-blue-600">
                                  <MessageSquare className="w-4 h-4" />
                                  <span>ÂõûÂ§ç</span>
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Related Tools */}
            <Card>
              <CardHeader>
                <CardTitle>Áõ∏ÂÖ≥Â∑•ÂÖ∑</CardTitle>
                <CardDescription>ÊÇ®ÂèØËÉΩÊÑüÂÖ¥Ë∂£ÁöÑÂÖ∂‰ªñAIÂ∑•ÂÖ∑</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {relatedTools.map((tool) => (
                  <div
                    key={tool.id}
                    className="flex items-center gap-3 p-3 border rounded-lg hover:bg-gray-50 cursor-pointer"
                  >
                    <div className="w-10 h-10 bg-gray-100 rounded-lg overflow-hidden">
                      <img
                        src={tool.icon || "/placeholder.svg"}
                        alt={tool.name}
                        className="w-full h-full object-cover"
                      />
                    </div>
                    <div className="flex-1">
                      <h4 className="font-medium text-gray-900 text-sm">{tool.name}</h4>
                      <p className="text-xs text-gray-600">{tool.description}</p>
                      <div className="flex items-center gap-1 mt-1">
                        {renderStars(tool.rating)}
                        <span className="text-xs text-gray-500">{tool.rating}</span>
                      </div>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>

            {/* Report */}
            <Card>
              <CardContent className="pt-6">
                <Button variant="outline" className="w-full text-red-600 border-red-200 hover:bg-red-50 bg-transparent">
                  <Flag className="w-4 h-4 mr-2" />
                  ‰∏æÊä•Ê≠§Â∑•ÂÖ∑
                </Button>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}
