### 完整建表语句

```sql
-- 工具评论主表
CREATE TABLE tool_comments (
    id SERIAL PRIMARY KEY,
    tool_id INTEGER NOT NULL,
    user_id UUID NOT NULL,
    parent_id INTEGER, -- 支持回复功能
    rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5), -- 1-5星评分
    title VARCHAR(200), -- 评论标题
    content TEXT NOT NULL, -- 评论内容
    pros JSONB DEFAULT '[]'::jsonb, -- 优点（JSON数组）
    cons JSONB DEFAULT '[]'::jsonb, -- 缺点（JSON数组）
    use_case TEXT, -- 使用场景描述
    experience_level TEXT CHECK (experience_level IN ('beginner', 'intermediate', 'advanced', 'expert')), -- 用户经验水平
    is_verified_user BOOLEAN NOT NULL DEFAULT false, -- 是否为验证用户（如付费用户、专家等）
    helpful_count INTEGER NOT NULL DEFAULT 0, -- 有用数量
    reply_count INTEGER NOT NULL DEFAULT 0, -- 回复数量
    status TEXT NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'hidden', 'deleted', 'pending_review')),
    flagged_count INTEGER NOT NULL DEFAULT 0, -- 被举报次数
    last_flagged_at TIMESTAMP, -- 最后被举报时间
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);

-- 创建索引
CREATE INDEX idx_tool_comments_tool_id ON tool_comments(tool_id);
CREATE INDEX idx_tool_comments_user_id ON tool_comments(user_id);
CREATE INDEX idx_tool_comments_parent_id ON tool_comments(parent_id);
CREATE INDEX idx_tool_comments_rating ON tool_comments(rating);
CREATE INDEX idx_tool_comments_status ON tool_comments(status);
CREATE INDEX idx_tool_comments_created_at ON tool_comments(created_at);
CREATE INDEX idx_tool_comments_helpful_count ON tool_comments(helpful_count);
CREATE INDEX idx_tool_comments_experience_level ON tool_comments(experience_level);

-- 复合索引优化查询性能
CREATE INDEX idx_tool_comments_tool_status_rating ON tool_comments(tool_id, status, rating);
CREATE INDEX idx_tool_comments_tool_created ON tool_comments(tool_id, created_at DESC);
CREATE INDEX idx_tool_comments_user_status ON tool_comments(user_id, status);


-- 评论互动表（点赞、举报等）
CREATE TABLE comment_interactions (
    id SERIAL PRIMARY KEY,
    comment_id INTEGER NOT NULL,
    user_id UUID NOT NULL,
    interaction_type TEXT NOT NULL CHECK (interaction_type IN ('helpful', 'not_helpful', 'flag', 'report')),
    metadata JSONB DEFAULT '{}'::jsonb, -- 额外信息（如举报原因）
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    -- 确保每个用户对同一评论只能有一种互动类型
    UNIQUE(comment_id, user_id, interaction_type)
);

-- 创建索引
CREATE INDEX idx_comment_interactions_comment_id ON comment_interactions(comment_id);
CREATE INDEX idx_comment_interactions_user_id ON comment_interactions(user_id);
CREATE INDEX idx_comment_interactions_type ON comment_interactions(interaction_type);


-- 评论标签表（用于分类和搜索）
CREATE TABLE comment_tags (
    id SERIAL PRIMARY KEY,
    comment_id INTEGER NOT NULL,
    tag_name VARCHAR(50) NOT NULL,
    tag_type TEXT NOT NULL CHECK (tag_type IN ('feature', 'use_case', 'sentiment', 'custom')),
    created_at TIMESTAMP NOT NULL DEFAULT NOW()
);

-- 创建索引
CREATE INDEX idx_comment_tags_comment_id ON comment_tags(comment_id);
CREATE INDEX idx_comment_tags_tag_name ON comment_tags(tag_name);
CREATE INDEX idx_comment_tags_tag_type ON comment_tags(tag_type);

-- 添加外键约束
ALTER TABLE tool_comments 
ADD CONSTRAINT fk_tool_comments_tool_id 
FOREIGN KEY (tool_id) REFERENCES ai_tools(id) ON DELETE CASCADE;

ALTER TABLE tool_comments 
ADD CONSTRAINT fk_tool_comments_user_id 
FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;

ALTER TABLE tool_comments 
ADD CONSTRAINT fk_tool_comments_parent_id 
FOREIGN KEY (parent_id) REFERENCES tool_comments(id) ON DELETE CASCADE;

ALTER TABLE comment_interactions 
ADD CONSTRAINT fk_comment_interactions_comment_id 
FOREIGN KEY (comment_id) REFERENCES tool_comments(id) ON DELETE CASCADE;

ALTER TABLE comment_interactions 
ADD CONSTRAINT fk_comment_interactions_user_id 
FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;

ALTER TABLE comment_tags 
ADD CONSTRAINT fk_comment_tags_comment_id 
FOREIGN KEY (comment_id) REFERENCES tool_comments(id) ON DELETE CASCADE;

-- 创建评论计数更新触发器函数
CREATE OR REPLACE FUNCTION update_tool_comment_counts()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        -- 新增评论时，更新工具表的评论计数
        UPDATE ai_tools
        SET rating_count = rating_count + 1
        WHERE id = NEW.tool_id;
        
        -- 如果是回复，更新父评论的回复计数
        IF NEW.parent_id IS NOT NULL THEN
            UPDATE tool_comments
            SET reply_count = reply_count + 1
            WHERE id = NEW.parent_id;
        END IF;
        
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        -- 删除评论时，减少工具表的评论计数
        UPDATE ai_tools
        SET rating_count = rating_count - 1
        WHERE id = OLD.tool_id;
        
        -- 如果是回复，减少父评论的回复计数
        IF OLD.parent_id IS NOT NULL THEN
            UPDATE tool_comments
            SET reply_count = reply_count - 1
            WHERE id = OLD.parent_id;
        END IF;
        
        RETURN OLD;
    END IF;
    RETURN NULL;
END;
$$ language 'plpgsql';

-- 创建触发器
CREATE TRIGGER trigger_update_tool_comment_counts
    AFTER INSERT OR DELETE ON tool_comments
    FOR EACH ROW EXECUTE FUNCTION update_tool_comment_counts();

-- 创建互动计数更新触发器函数
CREATE OR REPLACE FUNCTION update_comment_interaction_counts()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        -- 新增互动时，更新评论的相应计数
        IF NEW.interaction_type = 'helpful' THEN
            UPDATE tool_comments
            SET helpful_count = helpful_count + 1
            WHERE id = NEW.comment_id;
        ELSIF NEW.interaction_type = 'flag' OR NEW.interaction_type = 'report' THEN
            UPDATE tool_comments
            SET flagged_count = flagged_count + 1,
                last_flagged_at = NOW()
            WHERE id = NEW.comment_id;
        END IF;
        
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        -- 删除互动时，减少评论的相应计数
        IF OLD.interaction_type = 'helpful' THEN
            UPDATE tool_comments
            SET helpful_count = helpful_count - 1
            WHERE id = OLD.comment_id;
        ELSIF OLD.interaction_type = 'flag' OR OLD.interaction_type = 'report' THEN
            UPDATE tool_comments
            SET flagged_count = flagged_count - 1
            WHERE id = OLD.comment_id;
        END IF;
        
        RETURN OLD;
    END IF;
    RETURN NULL;
END;
$$ language 'plpgsql';

-- 创建触发器
CREATE TRIGGER trigger_update_comment_interaction_counts
    AFTER INSERT OR DELETE ON comment_interactions
    FOR EACH ROW EXECUTE FUNCTION update_comment_interaction_counts();

-- 启用RLS
ALTER TABLE tool_comments ENABLE ROW LEVEL SECURITY;
ALTER TABLE comment_interactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE comment_tags ENABLE ROW LEVEL SECURITY;

-- 评论表策略
CREATE POLICY "评论公开读取" ON tool_comments
FOR SELECT USING (status = 'active');

CREATE POLICY "用户创建评论" ON tool_comments
FOR INSERT WITH CHECK (user_id = auth.uid());

CREATE POLICY "用户修改自己的评论" ON tool_comments
FOR UPDATE USING (user_id = auth.uid());

CREATE POLICY "用户删除自己的评论" ON tool_comments
FOR DELETE USING (user_id = auth.uid());

-- 互动表策略
CREATE POLICY "互动公开读取" ON comment_interactions
FOR SELECT USING (true);

CREATE POLICY "用户创建互动" ON comment_interactions
FOR INSERT WITH CHECK (user_id = auth.uid());

CREATE POLICY "用户删除自己的互动" ON comment_interactions
FOR DELETE USING (user_id = auth.uid());
```
### 查询语句示例
```sql
-- 获取工具的所有评论（分页）
SELECT 
    c.*,
    u.email as user_email,
    u.raw_user_meta_data->>'name' as user_name,
    u.raw_user_meta_data->>'avatar_url' as user_avatar,
    COUNT(ci.id) FILTER (WHERE ci.interaction_type = 'helpful') as helpful_votes,
    COUNT(ci.id) FILTER (WHERE ci.interaction_type = 'not_helpful') as not_helpful_votes,
    EXISTS(
        SELECT 1 FROM comment_interactions 
        WHERE comment_id = c.id 
        AND user_id = $1::uuid 
        AND interaction_type = 'helpful'
    ) as user_has_voted_helpful
FROM tool_comments c
LEFT JOIN auth.users u ON c.user_id = u.id
LEFT JOIN comment_interactions ci ON c.id = ci.comment_id
WHERE c.tool_id = $2 
AND c.status = 'active'
AND c.parent_id IS NULL
GROUP BY c.id, u.email, u.raw_user_meta_data
ORDER BY 
    CASE WHEN c.is_verified_user THEN 1 ELSE 2 END,
    c.helpful_count DESC,
    c.created_at DESC
LIMIT $3 OFFSET $4;

-- 计算工具的平均评分和统计信息
SELECT 
    tool_id,
    COUNT(*) as total_reviews,
    AVG(rating) as average_rating,
    COUNT(*) FILTER (WHERE rating = 5) as five_star_count,
    COUNT(*) FILTER (WHERE rating = 4) as four_star_count,
    COUNT(*) FILTER (WHERE rating = 3) as three_star_count,
    COUNT(*) FILTER (WHERE rating = 2) as two_star_count,
    COUNT(*) FILTER (WHERE rating = 1) as one_star_count
FROM tool_comments
WHERE tool_id = $1 
AND status = 'active'
GROUP BY tool_id;
```
### 类型定义
```typescript
// types/database.ts

// types/database.ts

// 评论接口
export interface ToolComment {
  id: number;
  tool_id: number;
  user_id: string; // UUID类型
  parent_id?: number;
  rating: number; // 1-5星
  title?: string;
  content: string;
  pros: string[]; // 优点列表
  cons: string[]; // 缺点列表
  use_case?: string;
  experience_level: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  is_verified_user: boolean;
  helpful_count: number;
  reply_count: number;
  status: 'active' | 'hidden' | 'deleted' | 'pending_review';
  flagged_count: number;
  last_flagged_at?: string;
  created_at: string;
  updated_at: string;
}

// 评论互动接口
export interface CommentInteraction {
  id: number;
  comment_id: number;
  user_id: string; // UUID类型
  interaction_type: 'helpful' | 'not_helpful' | 'flag' | 'report';
  metadata?: any;
  created_at: string;
}

// 扩展的评论接口（包含用户信息和互动状态）
export interface ToolCommentWithUser extends ToolComment {
  user_email?: string;
  user_name?: string;
  user_avatar?: string;
  helpful_votes?: number;
  not_helpful_votes?: number;
  user_has_voted_helpful?: boolean;
  replies?: ToolCommentWithUser[];
}

// 工具评分统计接口
export interface ToolRatingStats {
  tool_id: number;
  total_reviews: number;
  average_rating: number;
  five_star_count: number;
  four_star_count: number;
  three_star_count: number;
  two_star_count: number;
  one_star_count: number;
}

// 获取工具评论列表
const { data: comments } = await supabase
  .from('tool_comments')
  .select(`
    *,
    auth.users!inner(email, raw_user_meta_data)
  `)
  .eq('tool_id', toolId)
  .eq('status', 'active')
  .is('parent_id', null)
  .order('created_at', { ascending: false });

// 创建新评论
const { data, error } = await supabase
  .from('tool_comments')
  .insert({
    tool_id: toolId,
    user_id: user.id,
    rating: 5,
    title: '非常好用的AI工具',
    content: '这个工具帮我提高了工作效率...',
    pros: ['界面友好', '功能强大'],
    cons: ['偶尔会卡顿'],
    experience_level: 'intermediate',
    use_case: '日常办公和内容创作'
  })
  .select()
  .single();

// 添加评论互动
const { error } = await supabase
  .from('comment_interactions')
  .insert({
    comment_id: commentId,
    user_id: user.id,
    interaction_type: 'helpful'
  });

```